name: Flippy-Openwrt

on:
  schedule:
    - cron: '0 23 * * 5'
  watch:
    types: started

env:
  REPO_FLODER: openwrt
  BUILD_UNIFREQ: true
  UPLOAD_RELEASE: true
  UPLOAD_ARTIFACT: false
  UPLOAD_COWTRANSFER: false
  TARGET_DEVICE: armvirt_64_Default

jobs:
  Flippy-Openwrt:
    name: Flippy-Openwrt-${{matrix.target}}
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    env:
      KERNEL_VERSION: ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target:
          - 5.18.4-flippy-73+
          - 5.17.15-flippy-73+
          - 5.15.47-flippy-73+o

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 部署
      id: organize
      run: |
        k=`curl -Ls github.com/hong0980/Actions-OpenWrt/releases | awk -F'"' '/download.*armvirt.*rootf/{print $2}' | head -1`
        u=`curl -Ls github.com/hong0980/Flippy-Openwrt/releases  | awk -F'"' '/download.*armvirt.*rootf/{print $2}' | head -1`
        if [[ $k =~ armvirt || $u =~ armvirt ]]; then
          ([[ $k =~ armvirt ]] && wget -q github.com/$k) || ([[ $u =~ armvirt ]] && wget -q github.com/$u)
          sudo ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          ( sudo apt update
          sudo apt -y --no-upgrade --no-install-recommends install git p7zip p7zip-full zip unzip gzip xz-utils pigz zstd ) &
          echo "::set-output name=status::success"
        else
          ( sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync
          sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ) &
          echo "PARTSIZE=700" >> $GITHUB_ENV
          echo "VERSION=plus" >> $GITHUB_ENV
          echo "IP=192.168.2.1" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-18.06-k5.4" >> $GITHUB_ENV
          echo "TARGET_DEVICE=armvirt_64_Default" >> $GITHUB_ENV
          curl -fsSL git.io/J6IXO | /bin/bash
        fi

    - name: 下载
      if: steps.organize.outputs.status != 'success' && !cancelled()
      run: |
        cd $REPO_FLODER
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "ARCH=$(awk -F'"' '/^CONFIG_TARGET_BOARD/{print $2}' .config)" >>$GITHUB_ENV

    - name: Cache
      if: steps.organize.outputs.status != 'success'
      uses: klever1988/cachewrtbuild@test
      continue-on-error: true
      with:
        ccache: 'true'
        mixkey: ${{env.ARCH}}
        prefix: ${{github.workspace}}/${{env.REPO_FLODER}}

    - name: 编译
      id: compile
      if: steps.organize.outputs.status != 'success' && !cancelled()
      run: |
        cd $REPO_FLODER
        make -j$(($(nproc)+1)) || make -j1 V=s || { echo "编译失败"; exit 1; }
        echo "::set-output name=status::success"
        echo "======================="
        echo "磁盘使用情况:"
        echo "======================="
        df -hT
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        ls bin/targets/*/*/

    - name: 筛选
      id: firmware
      if: steps.organize.outputs.status == 'success' || steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        mkdir firmware
        git clone -q https://github.com/unifreq/openwrt_packit opt/openwrt_packit
        if [[ `ls *.tar.gz` ]]; then
          echo firmware opt/openwrt_packit | xargs -n 1 cp -rv *.tar.gz
        else
          echo firmware opt/openwrt_packit | xargs -n 1 cp -rv $REPO_FLODER/bin/targets/*/*/*.tar.gz
        fi
        echo "::set-output name=status::success"
        echo "FIRMWARE=$GITHUB_WORKSPACE/firmware" >>$GITHUB_ENV
        echo "STRDATE=$(TZ=UTC-8 date +%Y-%m-%d)" >>$GITHUB_ENV
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        RANDOM=$$$(date +%s); rand=$[$RANDOM % ${#Emoji[@]}]
        echo "EMOJI=${Emoji[$rand]}" >>$GITHUB_ENV

    - name: 打包
      if: steps.firmware.outputs.status == 'success' && env.BUILD_UNIFREQ == 'true' && !cancelled()
      id: unifreq
      run: |
        cd opt/openwrt_packit || exit
        [[ -e files/luci-admin-status-index-html.patch ]] && \
        mv -fv $GITHUB_WORKSPACE/luci-admin-status-index-html.patch files
        rm files/luci-admin-status-index-html-02.patch
        sed -i 's/lean & lienol/immortalwrt/' public_funcs
        sed -i '{
          s|WHOAMI=.*|WHOAMI="hong0980"|
          s|OPENWRT_VER=.*|OPENWRT_VER="18.06-k5.4"|
          s|KERNEL_VERSION=.*|KERNEL_VERSION='"$KERNEL_VERSION"'|g
          s|KERNEL_PKG_HOME=.*|KERNEL_PKG_HOME='"$GITHUB_WORKSPACE/opt/kernel"'|
        }' make.env
        for x in `ls mk*.sh | grep -v "dockerimg"`; do
          sed -i '{
            s|OP_ROOT_TGZ=.*|OP_ROOT_TGZ='"$(ls *.tar.gz)"'|
            s|TGT_IMG=.*|TGT_IMG="${WORK_DIR}/openwrt_${OPENWRT_VER}_${SOC}_${BOARD}_k${KERNEL_VERSION}${SUBVER}_$(date +%Y-%m-%d).img"|
          }' $x
          PLATFORM=`awk -F= '/PLATFORM=/{print $2}' $x`
          [[ -e ../kernel/boot-${KERNEL_VERSION}.tar.gz ]] || \
          wget -q raw.githubusercontent.com/hong0980/kernel/master/boot-${KERNEL_VERSION}.tar.gz -P ../kernel
          [[ -e ../kernel/modules-${KERNEL_VERSION}.tar.gz ]] || \
          wget -q raw.githubusercontent.com/hong0980/kernel/master/modules-${KERNEL_VERSION}.tar.gz -P ../kernel
          [[ -e ../kernel/dtb-${PLATFORM}-${KERNEL_VERSION}.tar.gz ]] || \
          wget -q raw.githubusercontent.com/hong0980/kernel/master/dtb-${PLATFORM}-${KERNEL_VERSION}.tar.gz -P ../kernel
          sudo ./$x && {
            sudo gzip -9 output/*.img
            sudo mv -v output/*.img.gz ${FIRMWARE} || true
            echo "::set-output name=status::success"
          }
        done
        md5sum ${FIRMWARE}/* | sed "s|${FIRMWARE}/||" >>${FIRMWARE}/${KERNEL_VERSION}_md5.txt

    - name: packages
      if: steps.organize.outputs.status != 'success' && !cancelled()
      uses: actions/upload-artifact@v2.2.4
      with:
        name: OpenWrt_package
        path: ${{env.REPO_FLODER}}/bin/packages/

    - name: 上传 openwrt-armvirt-64-default-rootfs
      if: steps.organize.outputs.status != 'success' && !cancelled()
      uses: actions/upload-artifact@v2.2.4
      with:
        name: openwrt-armvirt-64-default-rootfs
        path: ${{env.REPO_FLODER}}/bin/targets/*/*/*.tar.gz

    - name: 上传到WeTransfer
      if: env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      continue-on-error: true
      run: |
        [ -e $REPO_FLODER/.config ] && sed -e '/^$/d;/DEFAULT/d;/i18n/d' $REPO_FLODER/.config > ${FIRMWARE}/n1-config.txt
        [ -d $REPO_FLODER/bin/packages ] && tar -zcf packages.tar.gz $REPO_FLODER/bin/packages/ && \
        cp -Rfv packages.tar.gz ${FIRMWARE}
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(grep https wetransfer.log | cut -f3 -d" ")"

    - name: 上传到 release
      if: env.UPLOAD_RELEASE == 'true' && steps.unifreq.outputs.status == 'success' && !cancelled()
      uses: svenstaro/upload-release-action@v2
      with:
        file_glob: true
        overwrite: true
        tag: ${{env.STRDATE}}
        file: ${{env.FIRMWARE}}/*
        repo_token: ${{secrets.GITHUB_TOKEN}}
        release_name: ${{env.STRDATE}} ${{env.EMOJI}} 自动发布 ${{env.EMOJI}}
        body: |
          - ✨✨✨✨
          - 基于flippy(https://github.com/unifreq/openwrt_packit )大的脚本打包固件，
          - 适配的机型有：微加云、贝壳云、我家云、N1、S905x3（包括常见的hk1、h96、x96等盒子），
          - 章鱼星球、s922x（目前支持GT-King、GT-King Pro两款盒子） 等！
          - +的内核版本较新；+o的版本相对+的内核更稳定（推荐使用）。
          - 默认IP：192.168.2.100 默认密码：win3gp
          - 当前使用➦immortalwrt的主源码(https://github.com/immortalwrt/immortalwrt openwrt-18.06-k5.4分支)
          - 一、Amlogic系列盒子，包括 N1、章鱼星球、S905X2外贸盒子、S905X3外贸盒子、S922X外贸盒子
          -   第一次刷机（从U盘或TF卡启动之后）：
          -   cd root && ./install-to-emmc.sh 或者： /root/install-to-emmc.sh 或者： openwrt-install-amlogic (65版本新增的命令）
          -   在线升级，先把 update-amlogic-openwrt.sh 以及镜像文件 xxxxxxxxxxxxxxxxxxxxxxxxx.img用winscp工具上传至/mnt/mmcblk2p4, 然后：
          -   cd mnt/mmcblk2p4 && chmod 755 update-amlogic-openwrt.sh
          -   ./update-amlogic-openwrt.sh xxxxxxxxxxxxxxxxxxxxxxxxxx.img (或者用晶晨宝盒也可以更新）
          - 二、rk3328盒子，包括贝壳云、我家云
          -   第一次刷机：线刷
          -   在线升级，先把 update-beikeyun(或l1pro)-openwrt.sh 以及镜像文件 xxxxxxxxxxxxxxxxxxxxxxxxx.img用winscp工具上传至/mnt/mmcblk0p4, 然后：
          -   cd /mnt/mmcblk0p4 && chmod 755 update-beikeyun(或l1pro)-openwrt.sh
          -   ./update-beikeyun(或l1pro)-openwrt.sh xxxxxxxxxxxxxxxxxxxxxxxxxx.img ＃ 注：beikeyun代表贝壳云， l1pro代表我家云  
          -   注意：update-beikeyun(或l1pro)-openwrt.sh一般随固件同时发布，在.7z包里面，每次升级最好都用最新版的update脚本　　
          -   或者： openwrt-update-rockchip xxxxxxxxxxxxxxxxxxxxxxxxxx.img　
          -   或者用晶晨宝盒更新
          - 三、allwinner H6，包括微加云刷机和升级：略（有微加云的基本都会了，没有的也买不到）
          - ✨✨✨✨
